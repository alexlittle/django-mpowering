# Generated by Django 2.2.12 on 2020-06-02 16:55

import ckeditor.fields
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import orb.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('peers', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('name_en', models.CharField(max_length=100, null=True)),
                ('top_level', models.BooleanField(default=False)),
                ('slug', orb.fields.AutoSlugField(blank=True, editable=False, max_length=100, null=True, populate_from='name', unique=True)),
                ('order_by', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ('name',),
            },
            managers=[
                ('categories', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('title', models.TextField(help_text='A title for the collection')),
                ('description', models.TextField(blank=True, default=None, help_text='A description of the collection', null=True)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private')], default='private', max_length=50)),
                ('image', models.ImageField(blank=True, null=True, upload_to='collection/%Y/%m/%d')),
                ('slug', orb.fields.AutoSlugField(blank=True, editable=False, max_length=255, null=True, populate_from='title', unique=True)),
            ],
            options={
                'verbose_name': 'Collection',
                'verbose_name_plural': 'Collections',
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False, null=True, unique=True)),
                ('title', models.TextField()),
                ('title_en', models.TextField(null=True)),
                ('description', models.TextField()),
                ('description_en', models.TextField(null=True)),
                ('image', models.ImageField(blank=True, max_length=200, null=True, upload_to='resourceimage/%Y/%m/%d')),
                ('status', models.CharField(choices=[('approved', 'Approved'), ('pending', 'Pending'), ('rejected', 'Rejected'), ('archived', 'Archived')], default='pending', max_length=50)),
                ('slug', orb.fields.AutoSlugField(blank=True, editable=False, max_length=100, null=True, populate_from='title', unique=True)),
                ('study_time_number', models.IntegerField(blank=True, default=0, null=True)),
                ('study_time_unit', models.CharField(blank=True, choices=[('mins', 'Mins'), ('hours', 'Hours'), ('days', 'Days'), ('weeks', 'Weeks')], max_length=10, null=True)),
                ('born_on', models.DateTimeField(blank=True, default=None, null=True)),
                ('attribution', models.TextField(blank=True, default=None, null=True)),
                ('attribution_en', models.TextField(blank=True, default=None, null=True)),
                ('source_url', models.URLField(blank=True, help_text='Original resource URL.', null=True)),
                ('source_name', models.CharField(blank=True, help_text='Name of the source ORB instance where resource was sourced.', max_length=200, null=True)),
                ('source_host', models.URLField(blank=True, help_text='Host URL of the original ORB instance where resource was sourced.', null=True)),
                ('create_user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resource_create_user', to=settings.AUTH_USER_MODEL)),
                ('source_peer', models.ForeignKey(blank=True, help_text='The peer ORB from which the resource was downloaded.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resources', to='peers.Peer')),
            ],
            options={
                'verbose_name': 'Resource',
                'verbose_name_plural': 'Resources',
                'ordering': ('title',),
            },
            managers=[
                ('resources', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ResourceFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False, null=True, unique=True)),
                ('file', models.FileField(max_length=200, upload_to='resource/%Y/%m/%d')),
                ('title', models.TextField(blank=True, null=True)),
                ('title_en', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('description_en', models.TextField(blank=True, null=True)),
                ('order_by', models.IntegerField(default=0)),
                ('image', models.ImageField(blank=True, max_length=200, null=True, upload_to='resourceimage/%Y/%m/%d')),
                ('file_full_text', models.TextField(blank=True, default=None, null=True)),
                ('sha1', models.CharField(blank=True, editable=False, max_length=40, null=True)),
                ('create_user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resource_file_create_user', to=settings.AUTH_USER_MODEL)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orb.Resource')),
                ('update_user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resource_file_update_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReviewerRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('medical', 'Medical'), ('technical', 'Technical'), ('training', 'Training')], default='medical', max_length=100, unique=True)),
            ],
            managers=[
                ('roles', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('name_en', models.CharField(max_length=100, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='tag/%Y/%m/%d')),
                ('slug', orb.fields.AutoSlugField(blank=True, editable=False, max_length=100, null=True, populate_from='name', unique=True)),
                ('order_by', models.IntegerField(default=0)),
                ('external_url', models.URLField(blank=True, default=None, max_length=500, null=True)),
                ('description', ckeditor.fields.RichTextField(blank=True, default=None, null=True)),
                ('description_en', ckeditor.fields.RichTextField(blank=True, default=None, null=True)),
                ('summary', models.CharField(blank=True, max_length=100, null=True)),
                ('summary_en', models.CharField(blank=True, max_length=100, null=True)),
                ('contact_email', models.CharField(blank=True, max_length=100, null=True)),
                ('published', models.BooleanField(default=True, help_text='Used to toggle status of health domains.')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orb.Category')),
                ('create_user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tag_create_user', to=settings.AUTH_USER_MODEL)),
                ('parent_tag', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='orb.Tag')),
                ('update_user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tag_update_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'ordering': ('name',),
                'unique_together': {('name', 'category')},
            },
            managers=[
                ('tags', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('photo', models.ImageField(blank=True, max_length=200, null=True, upload_to='userprofile/%Y/%m/%d')),
                ('about', models.TextField(blank=True, default=None, null=True)),
                ('job_title', models.TextField(blank=True, default=None, null=True)),
                ('role_other', models.TextField(blank=True, default=None, null=True)),
                ('phone_number', models.TextField(blank=True, default=None, null=True)),
                ('website', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('twitter', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('api_access', models.BooleanField(default=False)),
                ('gender', models.CharField(choices=[('female', 'Female'), ('male', 'Male'), ('none', 'Prefer not to say')], default='none', max_length=50)),
                ('age_range', models.CharField(choices=[('under_18', 'under 18'), ('18_25', '18-24'), ('25_35', '25-34'), ('35_50', '35-50'), ('over_50', 'over 50'), ('none', 'Prefer not to say')], default='none', max_length=50)),
                ('mailing', models.BooleanField(default=False)),
                ('survey', models.BooleanField(default=False)),
                ('organisation', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='organisation', to='orb.Tag')),
                ('reviewer_roles', models.ManyToManyField(blank=True, related_name='profiles', to='orb.ReviewerRole')),
                ('role', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='role', to='orb.Tag')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user profile',
                'verbose_name_plural': 'user profiles',
                'db_table': 'orb_userprofile',
            },
            managers=[
                ('profiles', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TagTracker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('view', 'View'), ('view-api', 'View-API'), ('view-url', 'View-URL')], default='view', max_length=50)),
                ('access_date', models.DateTimeField(auto_now_add=True)),
                ('ip', models.GenericIPAddressField(blank=True, default=None, null=True)),
                ('user_agent', models.TextField(blank=True, default=None, null=True)),
                ('extra_data', models.TextField(blank=True, default=None, null=True)),
                ('tag', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tracker', to='orb.Tag')),
                ('user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TagProperty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('value', models.TextField()),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='orb.Tag')),
            ],
            options={
                'verbose_name': 'Tag property',
                'verbose_name_plural': 'Tag properties',
                'ordering': ('tag', 'name', 'value'),
            },
        ),
        migrations.CreateModel(
            name='SearchTracker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.TextField(blank=True, default=None, null=True)),
                ('no_results', models.IntegerField(blank=True, default=0, null=True)),
                ('access_date', models.DateTimeField(auto_now_add=True)),
                ('ip', models.GenericIPAddressField(blank=True, default=None, null=True)),
                ('user_agent', models.TextField(blank=True, default=None, null=True)),
                ('type', models.CharField(choices=[('search', 'search'), ('search-api', 'search-api'), ('search-adv', 'search-adv')], default='search', max_length=50)),
                ('extra_data', models.TextField(blank=True, default=None, null=True)),
                ('user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ResourceWorkflowTracker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('approved', 'Approved'), ('pending', 'Pending'), ('rejected', 'Rejected'), ('archived', 'Archived')], default='pending', max_length=50)),
                ('notes', models.TextField(blank=True, null=True)),
                ('owner_email_sent', models.BooleanField(default=False)),
                ('create_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('resource', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='workflow_trackers', to='orb.Resource')),
            ],
            managers=[
                ('workflows', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ResourceURL',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('guid', models.UUIDField(default=uuid.uuid4, editable=False, null=True, unique=True)),
                ('url', models.URLField(max_length=500)),
                ('title', models.TextField(blank=True, null=True)),
                ('title_en', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('description_en', models.TextField(blank=True, null=True)),
                ('order_by', models.IntegerField(default=0)),
                ('file_size', models.IntegerField(default=0)),
                ('image', models.ImageField(blank=True, max_length=200, null=True, upload_to='resourceimage/%Y/%m/%d')),
                ('create_user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resource_url_create_user', to=settings.AUTH_USER_MODEL)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orb.Resource')),
                ('update_user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resource_url_update_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResourceTracker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('view', 'View'), ('view-api', 'View-api'), ('edit', 'Edit'), ('download', 'Download'), ('create', 'Create')], default='view', max_length=50)),
                ('access_date', models.DateTimeField(auto_now_add=True)),
                ('ip', models.GenericIPAddressField(blank=True, default=None, null=True)),
                ('user_agent', models.TextField(blank=True, default=None, null=True)),
                ('extra_data', models.TextField(blank=True, default=None, null=True)),
                ('survey_intended_use', models.CharField(blank=True, max_length=50, null=True)),
                ('survey_intended_use_other', models.TextField(blank=True, default='', null=True)),
                ('survey_health_worker_count', models.IntegerField(blank=True, null=True)),
                ('survey_health_worker_cadre', models.CharField(blank=True, max_length=50, null=True)),
                ('resource', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='orb.Resource')),
                ('resource_file', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='orb.ResourceFile')),
                ('resource_url', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='orb.ResourceURL')),
                ('user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ResourceTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('create_user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resourcetag_create_user', to=settings.AUTH_USER_MODEL)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orb.Resource')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resourcetag', to='orb.Tag')),
            ],
            options={
                'ordering': ('id',),
                'unique_together': {('resource', 'tag')},
            },
        ),
        migrations.CreateModel(
            name='ResourceRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('relationship_type', models.CharField(choices=[('is_translation_of', 'is translation of'), ('is_derivative_of', 'is derivative of'), ('is_contained_in', 'is contained in')], max_length=50)),
                ('description', models.TextField()),
                ('create_user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resource_relationship_create_user', to=settings.AUTH_USER_MODEL)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource', to='orb.Resource')),
                ('resource_related', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_related', to='orb.Resource')),
                ('update_user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resource_relationship_update_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResourceRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comments', models.TextField(blank=True, default=None, null=True)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orb.Resource')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResourceCriteria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('description_en', models.TextField(null=True)),
                ('category', models.CharField(blank=True, choices=[('qa', 'Quality Assurance'), ('value', 'Value for Frontline Health Workers (FLHW)'), ('video', 'Video resources'), ('animation', 'Animation resources'), ('audio', 'Audio resources'), ('text', 'Text based resources')], help_text='deprecated', max_length=50, null=True)),
                ('order_by', models.IntegerField(default=0)),
                ('category_order_by', models.IntegerField(default=0, help_text='deprecated')),
                ('role', models.ForeignKey(blank=True, help_text='Used to show specific criteria to reviewers based on their role. Leave blank if criterion applies generally.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='criteria', to='orb.ReviewerRole')),
            ],
            options={
                'verbose_name': 'resource criterion',
                'verbose_name_plural': 'resource criteria',
            },
            managers=[
                ('criteria', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='resource',
            name='tags',
            field=models.ManyToManyField(blank=True, through='orb.ResourceTag', to='orb.Tag'),
        ),
        migrations.AddField(
            model_name='resource',
            name='update_user',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resource_update_user', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='CollectionUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orb.Collection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Collection user',
                'verbose_name_plural': 'Collection users',
                'ordering': ('collection', 'user'),
            },
        ),
        migrations.CreateModel(
            name='CollectionResource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_by', models.IntegerField(default=0)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orb.Collection')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='orb.Resource')),
            ],
            options={
                'verbose_name': 'Collection resource',
                'verbose_name_plural': 'Collection resources',
                'ordering': ('collection', 'order_by', 'resource'),
            },
        ),
        migrations.CreateModel(
            name='TagOwner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owner', to='orb.Tag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'tag')},
            },
        ),
    ]
